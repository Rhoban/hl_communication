syntax="proto2";

import "camera.proto";
import "robot_estimation.proto";

package hl_communication;

/**
 * Represents the position of a point inside an image
 */
message Point2DMsg {
  required uint32 x = 1;
  required uint32 y = 2;
}

message Point3DMsg
{
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message Match2D3DMsg
{
  required Point2DMsg img_pos = 1;
  required Point3DMsg obj_pos = 2;
}

/**
 * Represents a rotated rectangle inside an image
 */
message RotatedRectMsg {
  /**
   * The center of the ball in the image. This is not the position of the ball
   * on the ground.
   */
  optional Point2DMsg center = 1;
  optional double length = 2;
  optional double width = 3;
  /**
   * The direction of the 'length' axis [rad]
   * - angle:    0 -> length is aligned with 'x' axis
   * - angle: pi/2 -> length is aligned with 'y' axis
   */
  optional double angle = 4;
}

message BallMsg {
  /**
   * The center of the ball in the image. This is not the position of the ball
   * on the ground.
   */
  optional Point2DMsg center = 1;
  /**
   * The apparent radius of the ball inside the image
   */
  optional double radius = 2;
  /**
   * Is the ball handled by an official of the game
   */
  optional bool handled = 3;
  /**
   * Sometimes it is possible to have several balls on the field
   * (e.g. during training session)
   */
  optional uint32 ball_id = 4;
}

message RobotMessage {
  /**
   * Position of the robot on the ground in the image
   */
  optional Point2DMsg ground_position = 1;
  /**
   * Bounding box entirely containing the robot
   */
  optional RotatedRectMsg bounding_box = 2;

  optional RobotIdentifier robot_id = 3;

  enum RobotStatus {
    KICKING = 1;
    FALLEN = 2;
    STANDING_UP = 3;
    MOVING = 4;
    WAITING = 5;
  }
  optional RobotStatus robot_status = 4;
}

message LabelMsg {
  optional uint32 frame_index = 1;
  repeated BallMsg balls = 3;
  repeated RobotMessage robots = 4;
  /**
   * By tagging multiple matches between img and object positions, user can
   * provide information used to estimate camera pose
   */
  repeated Match2D3DMsg field_matches = 5;
}

/**
 * Identifies the identity of the person who performed the labeling
 */
message LabelIdentifier {
  required string nick_name = 1;
}

message LabelCollection {
  required LabelIdentifier labeler_identity = 1;
  repeated LabelMsg labels = 2;
}

message MovieLabelCollection {
  required VideoSourceID source_id = 1;
  /**
   * Should be unique for each source, lexical ordering should preserve time-based ordering
   */
  optional string sequence_identifier = 2;
  repeated LabelCollection label_collections = 3;
  /**
   * Stores properties of the camera in the same message to make sure that a
   * MovieLabelCollection is self-contained
   */
  optional VideoMetaInformation video_meta_information = 4;
}

message GameLabelCollection {
  optional string date = 1;
  optional uint32 team1 = 2;
  optional uint32 team2 = 3;
  repeated MovieLabelCollection movies = 4;
}
