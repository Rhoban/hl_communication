syntax = "proto2";

package hl_communication;

enum Penalty {
     NONE = 0;
     SUBSTITUTE = 14;
     BALL_MANIPULATION = 30;
     PHYSICAL_CONTACT = 31;
     PICK_UP = 34;
     SERVICE = 35;
}

message GCRobotMsg {
  optional int32 penalty = 1;
  optional int32 secs_till_unpenalised = 2;
  optional int32 yellow_card_count = 3;
  optional int32 red_card_count = 4;
}

enum TeamColor {
     BLUE = 0;
     RED = 1;
     UNKNOWN = 2;// Team color is not specified
     CONFLICT = 3;// Two names are conflicting
}

message GCTeamMsg {

  optional int32 team_number = 1;
  /**
   * BLUE: 0
   * RED: 1
   */
  optional TeamColor team_color = 2;
  optional int32 score = 3;
  repeated GCRobotMsg robots = 4;
}

message GCMsg {
  /**
   * Reception time of the messages: microseconds since an arbitrary referential
   * this field should only be used for time differences between messages not for
   * synchronization of multiple sources (it requires offset to be determined)
   */
  optional uint64 time_stamp = 1;
  optional int32 struct_version = 2;
  optional int32 game_type = 3;
  optional int32 num_player = 4;
  optional int32 first_half = 5;
  optional int32 kick_off_team = 6;
  optional int32 sec_game_state = 7;
  optional int32 drop_in_team = 8;
  optional int32 drop_in_time = 9;
  optional int32 estimated_secs = 10;
  optional int32 secondary_secs = 11;
  optional int32 secondary_team = 12;
  optional int32 secondary_mode = 13;
  repeated GCTeamMsg teams = 14;
  /**
   * UTC timestamp of message sending (micro-seconds)
   */
  optional uint64 utc_time_stamp = 15;
}
