syntax="proto2";

package hl_communication;

import "robot_estimation.proto";

/**
 * This file describes the principal messages used for describing Camera
 * properties and Pose for videos
 *
 * All notations are based on OpenCV formalism for Intrinsic and Extrinsic
 * parameters of the camera: https://docs.opencv.org/3.4.5/d9/d0c/group__calib3d.html
 *
 * The field referential is defined as follows:
 * - Zero: Center of field at ground level
 * - X-axis goes from center to opposite goal
 * - Y-axis goes from center toward left side of the field while facing opposite goal
 * - Z-axis points toward the roof
 *
 * The camera referential is defined as follows:
 * - Zero: At camera optical center
 * - X-axis: aligned with x-axis of the image
 * - Y-axis: aligned with y-axis of the image
 * - Z-axis: direction toward which the camera is pointing
 */

/**
 * Defines the intrinsic parameters of a camera.
 */
message IntrinsicParameters {
  required float focal_x = 1;
  required float focal_y = 2;
  required uint32 center_x = 3;
  required uint32 center_y = 4;
  required uint32 img_width = 5;
  required uint32 img_height = 6;
  repeated float distortion = 7;
}

message Pose3D {
  /**
   * The rotation which transforms from field referential to camera referential
   * Size 3: Rotation vector (based on Rodrigues rotation)
   * Size 4: Quaternion (qw, qx, qy, qz)
   */ 
  repeated float rotation = 1;
  /**
   * Position of the field center in the camera referential [tx,ty,tz]
   */
  repeated float translation = 2;
}

message CameraMetaInformation {
  /**
   * Intrinsic parameters of the camera
   */
  optional IntrinsicParameters camera_parameters = 1;
  /**
   * Default pose of the camera if no pose is provided for a frame
   */
  optional Pose3D pose = 2;
}

/**
 * Describe the condition of acquisition of the frames, is useful to estimate
 * continuity of poses in a stream
 */
enum FrameStatus {
  UNKNOWN_FRAME_STATUS = 0;
  STATIC  = 1;// The camera is not moving, previous poses can be considered as valid
  MOVING  = 2;// The camera is moving slowly, interpolation of pose should be satisfying
  SHAKING = 3;// The camera is shaking, interpolation of pose is unlikely to give satisfying results
}

message FrameEntry {
  /**
   * Number of micro-seconds since epoch: 0h00 Jan.1 1970 UTC
   */
  optional uint64 utc_ts = 1;
  /**
   * Number of micro-seconds elapsed since an arbitrary referential (using monotonic clock)
   */
  optional uint64 monotonic_ts = 4;
  /**
   * The transformation from field referential to camera referential
   */
  optional Pose3D pose = 2;
  optional FrameStatus status = 3;
}

message RobotCameraIdentifier {
  /**
   * The robot who captured the video
   */
  required RobotIdentifier robot_id = 1;
  /**
   * The internal name of the camera for the robot (e.g. left, right, main)
   */
  required string camera_name = 2;
}

message VideoSourceID {
  oneof source_identifier {
    RobotCameraIdentifier robot_source = 1;
    /**
     * Should be unique for each camera
     */
    string external_source = 2;
  }
}

message VideoMetaInformation {
  /**
   * Intrinsic parameters of the camera
   */
  optional IntrinsicParameters camera_parameters = 1;
  /**
   * Default pose of the camera if no pose is provided for a frame
   */
  optional Pose3D default_pose = 2;
  /**
   * Contains information about each frame of the video
   */
  repeated FrameEntry frames = 3;
  /**
   * Offset between clock used for internal time_stamps and UTC time_stamp:
   * frame.time_stamp + time_offset = utc_time_stamp
   */
  optional int64 time_offset = 4;
  /**
   * Identifies the source of the video
   */
  optional VideoSourceID source_id = 5;
}